generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                 String     @id @default(cuid())
  firstName          String?
  lastName           String?
  email              String     @unique
  image              String?
  password           String?
  isTwoFactorEnabled Boolean    @default(false)
  emailVerified      DateTime?
  name               String?
  role               String     @default("ADMIN")
  accounts           Account[]
  sessions           Session[]
  reviews            Review[]
  createdProducts    Product[]  @relation("CreatedProducts")
  purchases          Purchase[]
  orders             Order[]
  downloads          Download[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Product {
  id              Int               @id @default(autoincrement())
  title           String
  slug            String            @unique
  description     String?
  price           Decimal           @db.Decimal(10, 2)
  discountAmount  Decimal?          @db.Decimal(10, 2)
  discountPercent Int?
  discountType    String?
  finalPrice      Decimal           @db.Decimal(10, 2)
  accessDuration  Int?
  downloadLimit   Int?
  inStock         Boolean           @default(true)
  isPublished     Boolean           @default(false)
  featured        Boolean           @default(false)
  downloadUrl     String?
  viewCount       Int               @default(0)
  downloadCount   Int               @default(0)
  purchaseCount   Int               @default(0)
  totalRevenue    Decimal           @default(0) @db.Decimal(10, 2)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdById     String?
  fileSize        String?
  fileType        String?
  orderItems      OrderItem[]
  images          ProductImage[]
  downloads       Download[]
  categories      CategoryProduct[]
  reviews         Review[]
  purchases       Purchase[]
  CategoryPath    CategoryPath[]
  createdBy       User?             @relation("CreatedProducts", fields: [createdById], references: [id])

  @@index([createdById])
  @@index([slug])
  @@index([isPublished])
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Category {
  id          String            @id @default(cuid())
  name        String            @unique
  slug        String            @unique
  description String?
  parentId    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isActive    Boolean           @default(true)
  level       Int               @default(1)
  path        String
  products    CategoryProduct[]
  parent      Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children    Category[]        @relation("CategoryHierarchy")

  @@unique([name, parentId])
  @@unique([slug, parentId])
  @@index([path])
  @@index([level])
}

model CategoryProduct {
  productId  Int
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

model PaymentGateway {
  id                  String        @id @default(cuid())
  name                String        @unique
  isActive            Boolean       @default(false)
  config              Json
  encryptionKey       String?
  encryptionIV        String?
  merchantId          String?
  businessName        String?
  businessEmail       String?
  environment         String        @default("test")
  description         String?
  notes               String?
  apiEndpoint         String?
  webhookUrl          String?
  supportsCreditCards Boolean       @default(true)
  supportsDirectDebit Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  transactions        Transaction[]
}

model Transaction {
  id                   String          @id @default(cuid())
  amount               Decimal         @db.Decimal(10, 2)
  currency             String          @default("USD")
  status               String
  paymentMethod        String?
  paymentType          String?
  gatewayId            String?
  gatewayTransactionId String?
  gatewayCustomerId    String?
  receiptUrl           String?
  receiptEmail         String?
  purchaseId           String?
  errorMessage         String?
  errorCode            String?
  metadata             Json?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  completedAt          DateTime?
  paymentGateway       PaymentGateway? @relation(fields: [gatewayId], references: [id])
  purchase             Purchase?       @relation(fields: [purchaseId], references: [id])
  orders               Order[]

  @@index([gatewayId])
  @@index([purchaseId])
  @@index([status])
  @@index([createdAt])
}

model Purchase {
  id            String        @id @default(cuid())
  productId     Int
  userId        String
  amount        Decimal       @db.Decimal(10, 2)
  accessExpires DateTime?
  downloadsLeft Int?
  status        String        @default("completed")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  product       Product       @relation(fields: [productId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  downloads     Download[]

  @@index([productId])
  @@index([userId])
}

model Review {
  id              String   @id @default(cuid())
  rating          Int      @db.SmallInt
  comment         String?
  productId       Int
  userId          String
  userName        String?
  helpfulCount    Int      @default(0)
  notHelpfulCount Int      @default(0)
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
  @@index([status])
}

model PackageDiscount {
  id        String   @id @default(cuid())
  minItems  Int
  discount  Decimal  @db.Decimal(5, 2)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoryPath {
  id        String  @id @default(cuid())
  productId Int
  path      String
  level1    String?
  level2    String?
  level3    String?
  level4    String?
  level5    String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, path])
  @@index([productId])
  @@index([path])
  @@index([level1, level2, level3])
}

model Order {
  id              String       @id @default(cuid())
  userId          String
  status          String       @default("pending")
  totalAmount     Decimal      @db.Decimal(10, 2)
  currency        String       @default("USD")
  paymentStatus   String       @default("unpaid")
  paymentIntentId String?
  transactionId   String?
  metadata        Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  transaction     Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([transactionId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId Int
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Download {
  id           String   @id @default(cuid())
  userId       String
  productId    Int
  purchaseId   String
  downloadedAt DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
  purchase     Purchase @relation(fields: [purchaseId], references: [id])

  @@index([userId])
  @@index([productId])
  @@index([purchaseId])
}
