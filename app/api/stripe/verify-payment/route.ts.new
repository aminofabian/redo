// app/api/stripe/verify-payment/route.ts
import Stripe from "stripe";
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from "@/lib/prisma";
import { getAuthSession } from "@/lib/getAuthSession";

// Import Decimal type from Prisma to handle currency values
import { Decimal } from '@prisma/client/runtime/library';

// Define interfaces for type safety
interface Product {
  id: string | bigint | number;
  title: string;
  description?: string | null;
  downloadLimit?: number | null;
  downloadUrl?: string | null;
  accessDuration?: number | null;
  [key: string]: any; // Allow for additional properties from Prisma
}

interface OrderItem {
  id: string | bigint | number;
  price: number | bigint | Decimal;
  quantity: number;
  productId: string | bigint | number;
  product: Product;
  [key: string]: any;
}

interface Order {
  id: string | bigint | number;
  totalAmount: number | bigint | Decimal;
  currency: string;
  status: string;
  paymentStatus: string;
  orderItems: OrderItem[];
  userId?: string | null;
  transactionId?: string | null;
  paymentIntentId?: string | null;
  metadata?: any;
  [key: string]: any;
}

interface TransactionResult {
  updatedOrder: Order;
  purchases: any[];
}

// Helper function to handle BigInt serialization
function safeJSONStringify(obj: any): string {
  return JSON.stringify(obj, (_, value) => {
    if (typeof value === 'bigint') {
      return value.toString();
    }
    return value;
  });
}

// Helper for safe response with BigInt support
function safeNextResponse(data: any, options: any = {}) {
  const body = safeJSONStringify(data);
  return new NextResponse(body, {
    ...options,
    headers: {
      ...options.headers,
      'content-type': 'application/json',
    },
  });
}

// Initialize Stripe
if (!process.env.STRIPE_SECRET_KEY) {
  throw new Error("STRIPE_SECRET_KEY is not defined in environment variables");
}

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
  apiVersion: "2025-03-31.basil",
});

// Shared logic for both GET and POST handlers
async function verifyPayment(request: Request) {
  try {
    const url = new URL(request.url);
    const sessionId = url.searchParams.get('session_id');
    
    if (!sessionId) {
      return safeNextResponse(
        { success: false, message: "Session ID is required" },
        { status: 400 }
      );
    }
    
    console.log("Processing payment verification for session:", sessionId);
    
    // Get the authenticated user (if available)
    const authSession = await getAuthSession();
    let userId = authSession?.user?.id;
    
    // Retrieve the Stripe session
    let stripeSession;
    try {
      stripeSession = await stripe.checkout.sessions.retrieve(sessionId, {
        expand: ['line_items', 'line_items.data.price.product', 'customer_details', 'payment_intent'],
      });
    } catch (stripeError) {
      console.error("Error retrieving Stripe session:", stripeError);
      return safeNextResponse(
        { 
          success: false, 
          message: "Could not retrieve Stripe session", 
          details: stripeError instanceof Error ? stripeError.message : "Unknown error" 
        },
        { status: 400 }
      );
    }

    if (stripeSession.payment_status !== 'paid') {
      return safeNextResponse(
        { success: false, message: "Payment not completed" },
        { status: 400 }
      );
    }

    // Get order ID from the Stripe session metadata
    const orderId = stripeSession.metadata?.orderId;
    
    if (!orderId) {
      return safeNextResponse(
        { success: false, message: "No order ID found in session metadata" },
        { status: 400 }
      );
    }
    
    console.log("Looking for order with ID:", orderId);
    
    // Find the order in our database
    let order;
    try {
      // First try exact match
      order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          orderItems: {
            include: {
              product: true
            }
          },
          user: false // Don't require user to avoid errors
        }
      });
      
      // If not found, try alternative lookup strategies
      if (!order) {
        console.log("Order not found with exact ID, trying alternative lookups");
        
        // Extract payment intent ID for additional search
        let paymentIntentId = '';
        if (typeof stripeSession.payment_intent === 'string') {
          paymentIntentId = stripeSession.payment_intent;
        } else if (stripeSession.payment_intent && typeof stripeSession.payment_intent === 'object') {
          paymentIntentId = (stripeSession.payment_intent as any).id || '';
        }
        
        // Try additional search criteria
        order = await prisma.order.findFirst({
          where: {
            OR: [
              { id: { contains: orderId } },
              paymentIntentId ? { paymentIntentId } : {},
              { transactionId: sessionId },
              { metadata: { path: ['stripeSessionId'], equals: sessionId } },
              { metadata: { path: ['checkoutSessionId'], equals: sessionId } }
            ].filter(condition => Object.keys(condition).length > 0)
          },
          include: {
            orderItems: {
              include: {
                product: true
              }
            },
            user: false
          }
        });
      }
    } catch (findError) {
      console.error('Error finding order:', findError);
      return safeNextResponse(
        { success: false, message: "Error finding order", details: findError instanceof Error ? findError.message : "Unknown error" },
        { status: 500 }
      );
    }
    
    if (!order) {
      console.log('Order not found after all lookup attempts');
      return safeNextResponse(
        { success: false, message: "Order not found", sessionId, orderId },
        { status: 404 }
      );
    }
    
    console.log("Order found:", order.id);
    
    // Get userId from order if not from session
    if (!userId) {
      userId = order.userId || 'guest-user';
    }
    
    // Extract payment intent ID
    let paymentIntentId: string;
    if (typeof stripeSession.payment_intent === 'string') {
      paymentIntentId = stripeSession.payment_intent;
    } else if (stripeSession.payment_intent && typeof stripeSession.payment_intent === 'object') {
      paymentIntentId = (stripeSession.payment_intent as any).id || '';
    } else {
      paymentIntentId = String(stripeSession.id); // Fallback
    }
    
    // Prepare transaction data
    const transactionData = {
      amount: order.totalAmount,
      currency: order.currency,
      status: 'completed',
      metadata: {
        stripeSessionId: sessionId,
        paymentIntentId: paymentIntentId
      }
    };
    
    // Process the transaction and create purchase records
    try {
      const result = await prisma.$transaction(async (tx) => {
        // 1. Create transaction record
        const transaction = await tx.transaction.create({
          data: transactionData
        });
        
        // 2. Update order status
        const updatedOrder = await tx.order.update({
          where: { id: order.id },
          data: {
            status: 'paid',
            paymentStatus: 'paid',
            transactionId: transaction.id,
            paymentIntentId: paymentIntentId
          },
          include: {
            orderItems: {
              include: {
                product: true
              }
            }
          }
        }) as unknown as Order;
        
        // 3. Create purchase records
        const purchases = [];
        for (const item of order.orderItems) {
          // Calculate access expiry
          let accessExpires = null;
          if (item.product.accessDuration) {
            const expiryDate = new Date();
            expiryDate.setDate(expiryDate.getDate() + item.product.accessDuration);
            accessExpires = expiryDate;
          }
          
          const purchase = await tx.purchase.create({
            data: {
              productId: item.productId,
              userId: userId,
              amount: item.price,
              accessExpires,
              downloadsLeft: item.product.downloadLimit,
              status: 'completed',
            }
          });
          purchases.push(purchase);
        }
        
        // 4. Link transaction to first purchase if any
        if (purchases.length > 0) {
          await tx.transaction.update({
            where: { id: transaction.id },
            data: { purchaseId: purchases[0].id }
          });
        }
        
        return { updatedOrder, purchases };
      });
      
      // Format response with safe JSON handling for BigInt
      const updatedOrder = result.updatedOrder;
      const orderDetails = {
        id: typeof updatedOrder.id === 'bigint' ? updatedOrder.id.toString() : updatedOrder.id,
        totalAmount: Number(updatedOrder.totalAmount),
        items: updatedOrder.orderItems.map(item => ({
          id: typeof item.id === 'bigint' ? item.id.toString() : item.id,
          title: item.product.title,
          price: Number(item.price),
          quantity: item.quantity,
          downloadAvailable: Boolean(item.product.downloadUrl)
        }))
      };
      
      return safeNextResponse({
        success: true,
        message: "Payment verified and order processed successfully",
        orderId: typeof updatedOrder.id === 'bigint' ? updatedOrder.id.toString() : updatedOrder.id,
        orderDetails
      });
      
    } catch (txError) {
      console.error("Transaction processing failed:", txError);
      return safeNextResponse(
        { success: false, message: "Transaction processing failed", details: txError instanceof Error ? txError.message : "Unknown error" },
        { status: 500 }
      );
    }
    
  } catch (error) {
    console.error("Error in payment verification:", error);
    return safeNextResponse(
      { success: false, message: "Payment verification failed", details: error instanceof Error ? error.message : "Unknown error" },
      { status: 500 }
    );
  }
}

// POST handler for payment verification
export async function POST(request: NextRequest) {
  return verifyPayment(request);
}

// GET handler for payment verification (supports both methods)
export async function GET(request: Request) {
  console.log('GET request received for payment verification, processing normally');
  return verifyPayment(request);
}
