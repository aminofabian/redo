// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
    relationMode = "prisma"

}
enum UserRole {
  ADMIN
  USER
  VERIFIED_USER
}
model User {
  id            String    @id @default(cuid())
  firstName          String?
  lastName          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password       String?
  role            UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  reviews       Review[]
  createdProducts Product[] @relation("CreatedProducts")
  purchases     Purchase[]
 
  @@map("users")
}
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model VerificationToken { 
id String @id @default(cuid())
email String
token String @unique
expires DateTime

@@unique([email, token])
}

model PasswordResetToken {
id String @id @default(cuid())
email String
token String @unique
expires DateTime

@@unique([email, token])

}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?  @db.Text
  price       Decimal   @db.Decimal(10, 2)
  discountAmount Decimal?  @db.Decimal(10, 2)
  discountPercent Int?
  discountType    String?   // "percent" or "amount"
  finalPrice      Decimal   @db.Decimal(10, 2)
  
  // Access Settings
  accessDuration  Int?      // in days, null means unlimited
  downloadLimit   Int?      // null means unlimited
  
  // Status
  inStock         Boolean   @default(true)
  isPublished     Boolean   @default(false)
  featured        Boolean   @default(false)
  
  // Media & Downloads
  images         ProductImage[]
  downloadUrl    String?
  
  // Relationships
  categories     CategoryProduct[]
  reviews        Review[]
  purchases      Purchase[]
  
  // Analytics & Metrics
  viewCount      Int       @default(0)
  downloadCount  Int       @default(0)
  purchaseCount  Int       @default(0)
  totalRevenue   Decimal   @default(0) @db.Decimal(10, 2)
  
  // Metadata
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      User      @relation("CreatedProducts", fields: [createdById], references: [id])
  createdById    String
  
  @@index([createdById])
  @@index([slug])
  @@index([isPublished])
}

model ProductImage {
  id          String   @id @default(cuid())
  url         String
  alt         String?
  isPrimary   Boolean  @default(false)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  
  createdAt   DateTime @default(now())
  
  @@index([productId])
}

model Category {
  id          String            @id @default(cuid())
  name        String            @unique
  slug        String            @unique
  description String?
  products    CategoryProduct[]
  parent      Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  parentId    String?
  children    Category[]        @relation("CategoryHierarchy")
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model CategoryProduct {
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  
  @@id([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

model Purchase {
  id          String    @id @default(cuid())
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  amount      Decimal   @db.Decimal(10, 2)
  
  // Access tracking
  accessExpires DateTime?
  downloadsLeft Int?
  
  status      String    @default("completed") // pending, completed, refunded
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([productId])
  @@index([userId])
}

model Review {
  id          String    @id @default(cuid())
  rating      Int       @db.SmallInt
  comment     String?   @db.Text
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([productId])
  @@index([userId])
}

